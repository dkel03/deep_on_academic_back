  scalar DateTime
  scalar ID

  type Query {
    test(id: ID!): Test
    tests: [Test!]!
    log(id: ID!): Log
    logs(filter: String, skip: Int, first: Int, orderBy: LogOrderByInput): [Log!]!
    user(id: ID!): User
    users(filter: userType): [User!]!
    userType: String
  }

  type Mutation {
    createTest(type: Type!, description: String!, answerSheet: [AnswerSheetInput!]!): Test!
    createLog(userId: ID!, testId: ID!, answerSheet: [AnswerSheetInput!]!): Log!
    deleteLog(logName: String!): String!
    signup(email: String!, password: String!, name: String!, userType: userType!): AuthPayload
    login(email: String!, password: String!): AuthPayload
  }

  type Subscription {
    logSubscription: LogPayload!
  }

  type LogPayload {
    state: State!
    log: Log
  }

  type Test {
    id: ID!
    createdAt: DateTime!
    type: Type!
    description: String!
    answerSheet: [AnswerSheet!]!
  }

  type AnswerSheet {
    id: ID!
    name: String!
    answers: [Answer!]!
  }

  input AnswerSheetInput {
    name: String!
    answers: [AnswerInput!]!
  }

  type Answer {
    id: ID!
    number: Int!
    answer: TenBranch!
  }

  input AnswerInput {
    number: Int!
    answer: TenBranch!
  }

  type User {
    id: ID!
    name: String!
    email: String!
    userType: userType!
    logs: [Log!]
  }

  type AuthPayload {
    token: String
    user: User
  }

  type Log {
    id: ID!
    createdAt: DateTime!
    logName: String!
    user: User!
    test: Test!
    totalScore: Int!
    gradeInfo: [GradeSheet!]!
  }

  type GradeSheet {
    id: ID!
    logName: String!
    name: String!
    sumScore: Int!
    scores: [Score!]!
  }

  input GradeSheetInput {
    logName: String!
    name: String!
    sumScore: Int!
    scores: [ScoreInput!]!
  }

  type Score {
    id: ID!
    logName: String!
    number: Int!
    ox: OX!
  }

  input ScoreInput {
    logName: String!
    number: Int!
    ox: OX!
  }

  enum Type {
    ACT
    SAT
  }

  enum userType {
    student
    teacher
  }

  enum TenBranch {
    A
    B
    C
    D
    E
    F
    G
    H
    J
    K
  }

  enum OX {
    O
    X
  }

  enum LogOrderByInput {
    id_ASC
    id_DESC
    createdAt_ASC
    createdAt_DESC
    logName_ASC
    logName_DESC
    totalScore_ASC
    totalScore_DESC
  }

  enum State {
    created
    deleted
  }