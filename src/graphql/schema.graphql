  scalar DateTime
  scalar ID

  type Query {
    test(id: ID!): Test
    tests: [Test!]!
    log(id: ID!): Log
    logs: [Log!]!
    user(id: ID!): User
    users: [User!]!
    userType: String
  }

  type Mutation {
    createTest(type: Type!, description: String!, answerSheet: [AnswerSheetInput!]!): Test!
    createLog(userId: ID!, testId: ID!, answerSheet: [AnswerSheetInput!]!): Log!
    signup(email: String!, password: String!, name: String!, userType: userType!): AuthPayload
    login(email: String!, password: String!): AuthPayload
  }

  type Test {
    id: ID!
    createdAt: DateTime!
    type: Type!
    description: String!
    answerSheet: [AnswerSheet!]!
  }

  type AnswerSheet {
    id: ID!
    name: String!
    answers: [Answer!]!
  }

  input AnswerSheetInput {
    name: String!
    answers: [AnswerInput!]!
  }

  type Answer {
    id: ID!
    number: Int!
    answer: TenBranch!
  }

  input AnswerInput {
    number: Int!
    answer: TenBranch!
  }

  type User {
    id: ID!
    name: String!
    email: String!
    userType: userType!
    logs: [Log!]
  }

  type AuthPayload {
    token: String
    user: User
  }

  type Log {
    id: ID!
    createdAt: DateTime!
    user: User!
    test: Test!
    answerSheet: [AnswerSheet!]!
    score: Int!
  }

  type Grade {
    id: ID
    score: Int!
  }

  enum Type {
    ACT
    SAT
  }

  enum userType {
    student
    teacher
  }

  enum Role {
    NONE
    READ
    WRITE
  }

  enum TenBranch {
    A
    B
    C
    D
    E
    F
    G
    H
    J
    K
  }