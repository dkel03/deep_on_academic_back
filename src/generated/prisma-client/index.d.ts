// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  answerSheet: (where?: AnswerSheetWhereInput) => Promise<boolean>;
  gradeSheet: (where?: GradeSheetWhereInput) => Promise<boolean>;
  log: (where?: LogWhereInput) => Promise<boolean>;
  score: (where?: ScoreWhereInput) => Promise<boolean>;
  test: (where?: TestWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerNullablePromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  answerSheet: (
    where: AnswerSheetWhereUniqueInput
  ) => AnswerSheetNullablePromise;
  answerSheets: (args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AnswerSheet>;
  answerSheetsConnection: (args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerSheetConnectionPromise;
  gradeSheet: (where: GradeSheetWhereUniqueInput) => GradeSheetNullablePromise;
  gradeSheets: (args?: {
    where?: GradeSheetWhereInput;
    orderBy?: GradeSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GradeSheet>;
  gradeSheetsConnection: (args?: {
    where?: GradeSheetWhereInput;
    orderBy?: GradeSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GradeSheetConnectionPromise;
  log: (where: LogWhereUniqueInput) => LogNullablePromise;
  logs: (args?: {
    where?: LogWhereInput;
    orderBy?: LogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Log>;
  logsConnection: (args?: {
    where?: LogWhereInput;
    orderBy?: LogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LogConnectionPromise;
  score: (where: ScoreWhereUniqueInput) => ScoreNullablePromise;
  scores: (args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Score>;
  scoresConnection: (args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ScoreConnectionPromise;
  test: (where: TestWhereUniqueInput) => TestNullablePromise;
  tests: (args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Test>;
  testsConnection: (args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TestConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  updateManyAnswers: (args: {
    data: AnswerUpdateManyMutationInput;
    where?: AnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createAnswerSheet: (data: AnswerSheetCreateInput) => AnswerSheetPromise;
  updateAnswerSheet: (args: {
    data: AnswerSheetUpdateInput;
    where: AnswerSheetWhereUniqueInput;
  }) => AnswerSheetPromise;
  updateManyAnswerSheets: (args: {
    data: AnswerSheetUpdateManyMutationInput;
    where?: AnswerSheetWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswerSheet: (args: {
    where: AnswerSheetWhereUniqueInput;
    create: AnswerSheetCreateInput;
    update: AnswerSheetUpdateInput;
  }) => AnswerSheetPromise;
  deleteAnswerSheet: (where: AnswerSheetWhereUniqueInput) => AnswerSheetPromise;
  deleteManyAnswerSheets: (
    where?: AnswerSheetWhereInput
  ) => BatchPayloadPromise;
  createGradeSheet: (data: GradeSheetCreateInput) => GradeSheetPromise;
  updateGradeSheet: (args: {
    data: GradeSheetUpdateInput;
    where: GradeSheetWhereUniqueInput;
  }) => GradeSheetPromise;
  updateManyGradeSheets: (args: {
    data: GradeSheetUpdateManyMutationInput;
    where?: GradeSheetWhereInput;
  }) => BatchPayloadPromise;
  upsertGradeSheet: (args: {
    where: GradeSheetWhereUniqueInput;
    create: GradeSheetCreateInput;
    update: GradeSheetUpdateInput;
  }) => GradeSheetPromise;
  deleteGradeSheet: (where: GradeSheetWhereUniqueInput) => GradeSheetPromise;
  deleteManyGradeSheets: (where?: GradeSheetWhereInput) => BatchPayloadPromise;
  createLog: (data: LogCreateInput) => LogPromise;
  updateLog: (args: {
    data: LogUpdateInput;
    where: LogWhereUniqueInput;
  }) => LogPromise;
  updateManyLogs: (args: {
    data: LogUpdateManyMutationInput;
    where?: LogWhereInput;
  }) => BatchPayloadPromise;
  upsertLog: (args: {
    where: LogWhereUniqueInput;
    create: LogCreateInput;
    update: LogUpdateInput;
  }) => LogPromise;
  deleteLog: (where: LogWhereUniqueInput) => LogPromise;
  deleteManyLogs: (where?: LogWhereInput) => BatchPayloadPromise;
  createScore: (data: ScoreCreateInput) => ScorePromise;
  updateScore: (args: {
    data: ScoreUpdateInput;
    where: ScoreWhereUniqueInput;
  }) => ScorePromise;
  updateManyScores: (args: {
    data: ScoreUpdateManyMutationInput;
    where?: ScoreWhereInput;
  }) => BatchPayloadPromise;
  upsertScore: (args: {
    where: ScoreWhereUniqueInput;
    create: ScoreCreateInput;
    update: ScoreUpdateInput;
  }) => ScorePromise;
  deleteScore: (where: ScoreWhereUniqueInput) => ScorePromise;
  deleteManyScores: (where?: ScoreWhereInput) => BatchPayloadPromise;
  createTest: (data: TestCreateInput) => TestPromise;
  updateTest: (args: {
    data: TestUpdateInput;
    where: TestWhereUniqueInput;
  }) => TestPromise;
  updateManyTests: (args: {
    data: TestUpdateManyMutationInput;
    where?: TestWhereInput;
  }) => BatchPayloadPromise;
  upsertTest: (args: {
    where: TestWhereUniqueInput;
    create: TestCreateInput;
    update: TestUpdateInput;
  }) => TestPromise;
  deleteTest: (where: TestWhereUniqueInput) => TestPromise;
  deleteManyTests: (where?: TestWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  answerSheet: (
    where?: AnswerSheetSubscriptionWhereInput
  ) => AnswerSheetSubscriptionPayloadSubscription;
  gradeSheet: (
    where?: GradeSheetSubscriptionWhereInput
  ) => GradeSheetSubscriptionPayloadSubscription;
  log: (
    where?: LogSubscriptionWhereInput
  ) => LogSubscriptionPayloadSubscription;
  score: (
    where?: ScoreSubscriptionWhereInput
  ) => ScoreSubscriptionPayloadSubscription;
  test: (
    where?: TestSubscriptionWhereInput
  ) => TestSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "testName_ASC"
  | "testName_DESC"
  | "number_ASC"
  | "number_DESC"
  | "answer_ASC"
  | "answer_DESC";

export type AnswerSheetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "testName_ASC"
  | "testName_DESC"
  | "name_ASC"
  | "name_DESC";

export type ScoreOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "logName_ASC"
  | "logName_DESC"
  | "number_ASC"
  | "number_DESC"
  | "ox_ASC"
  | "ox_DESC";

export type GradeSheetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "logName_ASC"
  | "logName_DESC"
  | "name_ASC"
  | "name_DESC"
  | "sumScore_ASC"
  | "sumScore_DESC";

export type LogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "logName_ASC"
  | "logName_DESC"
  | "totalScore_ASC"
  | "totalScore_DESC";

export type TestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "testName_ASC"
  | "testName_DESC"
  | "type_ASC"
  | "type_DESC"
  | "description_ASC"
  | "description_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "userType_ASC"
  | "userType_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  testName?: Maybe<String>;
  testName_not?: Maybe<String>;
  testName_in?: Maybe<String[] | String>;
  testName_not_in?: Maybe<String[] | String>;
  testName_lt?: Maybe<String>;
  testName_lte?: Maybe<String>;
  testName_gt?: Maybe<String>;
  testName_gte?: Maybe<String>;
  testName_contains?: Maybe<String>;
  testName_not_contains?: Maybe<String>;
  testName_starts_with?: Maybe<String>;
  testName_not_starts_with?: Maybe<String>;
  testName_ends_with?: Maybe<String>;
  testName_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  OR?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  NOT?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
}

export type AnswerSheetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AnswerSheetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  testName?: Maybe<String>;
  testName_not?: Maybe<String>;
  testName_in?: Maybe<String[] | String>;
  testName_not_in?: Maybe<String[] | String>;
  testName_lt?: Maybe<String>;
  testName_lte?: Maybe<String>;
  testName_gt?: Maybe<String>;
  testName_gte?: Maybe<String>;
  testName_contains?: Maybe<String>;
  testName_not_contains?: Maybe<String>;
  testName_starts_with?: Maybe<String>;
  testName_not_starts_with?: Maybe<String>;
  testName_ends_with?: Maybe<String>;
  testName_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  answers_every?: Maybe<AnswerWhereInput>;
  answers_some?: Maybe<AnswerWhereInput>;
  answers_none?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSheetWhereInput[] | AnswerSheetWhereInput>;
  OR?: Maybe<AnswerSheetWhereInput[] | AnswerSheetWhereInput>;
  NOT?: Maybe<AnswerSheetWhereInput[] | AnswerSheetWhereInput>;
}

export type GradeSheetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ScoreWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  logName?: Maybe<String>;
  logName_not?: Maybe<String>;
  logName_in?: Maybe<String[] | String>;
  logName_not_in?: Maybe<String[] | String>;
  logName_lt?: Maybe<String>;
  logName_lte?: Maybe<String>;
  logName_gt?: Maybe<String>;
  logName_gte?: Maybe<String>;
  logName_contains?: Maybe<String>;
  logName_not_contains?: Maybe<String>;
  logName_starts_with?: Maybe<String>;
  logName_not_starts_with?: Maybe<String>;
  logName_ends_with?: Maybe<String>;
  logName_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  ox?: Maybe<String>;
  ox_not?: Maybe<String>;
  ox_in?: Maybe<String[] | String>;
  ox_not_in?: Maybe<String[] | String>;
  ox_lt?: Maybe<String>;
  ox_lte?: Maybe<String>;
  ox_gt?: Maybe<String>;
  ox_gte?: Maybe<String>;
  ox_contains?: Maybe<String>;
  ox_not_contains?: Maybe<String>;
  ox_starts_with?: Maybe<String>;
  ox_not_starts_with?: Maybe<String>;
  ox_ends_with?: Maybe<String>;
  ox_not_ends_with?: Maybe<String>;
  AND?: Maybe<ScoreWhereInput[] | ScoreWhereInput>;
  OR?: Maybe<ScoreWhereInput[] | ScoreWhereInput>;
  NOT?: Maybe<ScoreWhereInput[] | ScoreWhereInput>;
}

export interface GradeSheetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  logName?: Maybe<String>;
  logName_not?: Maybe<String>;
  logName_in?: Maybe<String[] | String>;
  logName_not_in?: Maybe<String[] | String>;
  logName_lt?: Maybe<String>;
  logName_lte?: Maybe<String>;
  logName_gt?: Maybe<String>;
  logName_gte?: Maybe<String>;
  logName_contains?: Maybe<String>;
  logName_not_contains?: Maybe<String>;
  logName_starts_with?: Maybe<String>;
  logName_not_starts_with?: Maybe<String>;
  logName_ends_with?: Maybe<String>;
  logName_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  sumScore?: Maybe<Int>;
  sumScore_not?: Maybe<Int>;
  sumScore_in?: Maybe<Int[] | Int>;
  sumScore_not_in?: Maybe<Int[] | Int>;
  sumScore_lt?: Maybe<Int>;
  sumScore_lte?: Maybe<Int>;
  sumScore_gt?: Maybe<Int>;
  sumScore_gte?: Maybe<Int>;
  scores_every?: Maybe<ScoreWhereInput>;
  scores_some?: Maybe<ScoreWhereInput>;
  scores_none?: Maybe<ScoreWhereInput>;
  AND?: Maybe<GradeSheetWhereInput[] | GradeSheetWhereInput>;
  OR?: Maybe<GradeSheetWhereInput[] | GradeSheetWhereInput>;
  NOT?: Maybe<GradeSheetWhereInput[] | GradeSheetWhereInput>;
}

export type LogWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  logName?: Maybe<String>;
}>;

export interface LogWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  logName?: Maybe<String>;
  logName_not?: Maybe<String>;
  logName_in?: Maybe<String[] | String>;
  logName_not_in?: Maybe<String[] | String>;
  logName_lt?: Maybe<String>;
  logName_lte?: Maybe<String>;
  logName_gt?: Maybe<String>;
  logName_gte?: Maybe<String>;
  logName_contains?: Maybe<String>;
  logName_not_contains?: Maybe<String>;
  logName_starts_with?: Maybe<String>;
  logName_not_starts_with?: Maybe<String>;
  logName_ends_with?: Maybe<String>;
  logName_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  test?: Maybe<TestWhereInput>;
  totalScore?: Maybe<Int>;
  totalScore_not?: Maybe<Int>;
  totalScore_in?: Maybe<Int[] | Int>;
  totalScore_not_in?: Maybe<Int[] | Int>;
  totalScore_lt?: Maybe<Int>;
  totalScore_lte?: Maybe<Int>;
  totalScore_gt?: Maybe<Int>;
  totalScore_gte?: Maybe<Int>;
  gradeInfo_every?: Maybe<GradeSheetWhereInput>;
  gradeInfo_some?: Maybe<GradeSheetWhereInput>;
  gradeInfo_none?: Maybe<GradeSheetWhereInput>;
  AND?: Maybe<LogWhereInput[] | LogWhereInput>;
  OR?: Maybe<LogWhereInput[] | LogWhereInput>;
  NOT?: Maybe<LogWhereInput[] | LogWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  userType?: Maybe<String>;
  userType_not?: Maybe<String>;
  userType_in?: Maybe<String[] | String>;
  userType_not_in?: Maybe<String[] | String>;
  userType_lt?: Maybe<String>;
  userType_lte?: Maybe<String>;
  userType_gt?: Maybe<String>;
  userType_gte?: Maybe<String>;
  userType_contains?: Maybe<String>;
  userType_not_contains?: Maybe<String>;
  userType_starts_with?: Maybe<String>;
  userType_not_starts_with?: Maybe<String>;
  userType_ends_with?: Maybe<String>;
  userType_not_ends_with?: Maybe<String>;
  logs_every?: Maybe<LogWhereInput>;
  logs_some?: Maybe<LogWhereInput>;
  logs_none?: Maybe<LogWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  testName?: Maybe<String>;
  testName_not?: Maybe<String>;
  testName_in?: Maybe<String[] | String>;
  testName_not_in?: Maybe<String[] | String>;
  testName_lt?: Maybe<String>;
  testName_lte?: Maybe<String>;
  testName_gt?: Maybe<String>;
  testName_gte?: Maybe<String>;
  testName_contains?: Maybe<String>;
  testName_not_contains?: Maybe<String>;
  testName_starts_with?: Maybe<String>;
  testName_not_starts_with?: Maybe<String>;
  testName_ends_with?: Maybe<String>;
  testName_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  answerSheet_every?: Maybe<AnswerSheetWhereInput>;
  answerSheet_some?: Maybe<AnswerSheetWhereInput>;
  answerSheet_none?: Maybe<AnswerSheetWhereInput>;
  AND?: Maybe<TestWhereInput[] | TestWhereInput>;
  OR?: Maybe<TestWhereInput[] | TestWhereInput>;
  NOT?: Maybe<TestWhereInput[] | TestWhereInput>;
}

export type ScoreWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  testName?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AnswerCreateInput {
  id?: Maybe<ID_Input>;
  testName?: Maybe<String>;
  number: Int;
  answer: String;
}

export interface AnswerUpdateInput {
  testName?: Maybe<String>;
  number?: Maybe<Int>;
  answer?: Maybe<String>;
}

export interface AnswerUpdateManyMutationInput {
  testName?: Maybe<String>;
  number?: Maybe<Int>;
  answer?: Maybe<String>;
}

export interface AnswerSheetCreateInput {
  id?: Maybe<ID_Input>;
  testName?: Maybe<String>;
  name: String;
  answers?: Maybe<AnswerCreateManyInput>;
}

export interface AnswerCreateManyInput {
  create?: Maybe<AnswerCreateInput[] | AnswerCreateInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
}

export interface AnswerSheetUpdateInput {
  testName?: Maybe<String>;
  name?: Maybe<String>;
  answers?: Maybe<AnswerUpdateManyInput>;
}

export interface AnswerUpdateManyInput {
  create?: Maybe<AnswerCreateInput[] | AnswerCreateInput>;
  update?: Maybe<
    | AnswerUpdateWithWhereUniqueNestedInput[]
    | AnswerUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AnswerUpsertWithWhereUniqueNestedInput[]
    | AnswerUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  set?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  disconnect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  deleteMany?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  updateMany?: Maybe<
    | AnswerUpdateManyWithWhereNestedInput[]
    | AnswerUpdateManyWithWhereNestedInput
  >;
}

export interface AnswerUpdateWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateDataInput;
}

export interface AnswerUpdateDataInput {
  testName?: Maybe<String>;
  number?: Maybe<Int>;
  answer?: Maybe<String>;
}

export interface AnswerUpsertWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateDataInput;
  create: AnswerCreateInput;
}

export interface AnswerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  testName?: Maybe<String>;
  testName_not?: Maybe<String>;
  testName_in?: Maybe<String[] | String>;
  testName_not_in?: Maybe<String[] | String>;
  testName_lt?: Maybe<String>;
  testName_lte?: Maybe<String>;
  testName_gt?: Maybe<String>;
  testName_gte?: Maybe<String>;
  testName_contains?: Maybe<String>;
  testName_not_contains?: Maybe<String>;
  testName_starts_with?: Maybe<String>;
  testName_not_starts_with?: Maybe<String>;
  testName_ends_with?: Maybe<String>;
  testName_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  OR?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  NOT?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput;
  data: AnswerUpdateManyDataInput;
}

export interface AnswerUpdateManyDataInput {
  testName?: Maybe<String>;
  number?: Maybe<Int>;
  answer?: Maybe<String>;
}

export interface AnswerSheetUpdateManyMutationInput {
  testName?: Maybe<String>;
  name?: Maybe<String>;
}

export interface GradeSheetCreateInput {
  id?: Maybe<ID_Input>;
  logName?: Maybe<String>;
  name: String;
  sumScore: Int;
  scores?: Maybe<ScoreCreateManyInput>;
}

export interface ScoreCreateManyInput {
  create?: Maybe<ScoreCreateInput[] | ScoreCreateInput>;
  connect?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
}

export interface ScoreCreateInput {
  id?: Maybe<ID_Input>;
  logName?: Maybe<String>;
  number: Int;
  ox: String;
}

export interface GradeSheetUpdateInput {
  logName?: Maybe<String>;
  name?: Maybe<String>;
  sumScore?: Maybe<Int>;
  scores?: Maybe<ScoreUpdateManyInput>;
}

export interface ScoreUpdateManyInput {
  create?: Maybe<ScoreCreateInput[] | ScoreCreateInput>;
  update?: Maybe<
    | ScoreUpdateWithWhereUniqueNestedInput[]
    | ScoreUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ScoreUpsertWithWhereUniqueNestedInput[]
    | ScoreUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  connect?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  set?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  disconnect?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  deleteMany?: Maybe<ScoreScalarWhereInput[] | ScoreScalarWhereInput>;
  updateMany?: Maybe<
    ScoreUpdateManyWithWhereNestedInput[] | ScoreUpdateManyWithWhereNestedInput
  >;
}

export interface ScoreUpdateWithWhereUniqueNestedInput {
  where: ScoreWhereUniqueInput;
  data: ScoreUpdateDataInput;
}

export interface ScoreUpdateDataInput {
  logName?: Maybe<String>;
  number?: Maybe<Int>;
  ox?: Maybe<String>;
}

export interface ScoreUpsertWithWhereUniqueNestedInput {
  where: ScoreWhereUniqueInput;
  update: ScoreUpdateDataInput;
  create: ScoreCreateInput;
}

export interface ScoreScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  logName?: Maybe<String>;
  logName_not?: Maybe<String>;
  logName_in?: Maybe<String[] | String>;
  logName_not_in?: Maybe<String[] | String>;
  logName_lt?: Maybe<String>;
  logName_lte?: Maybe<String>;
  logName_gt?: Maybe<String>;
  logName_gte?: Maybe<String>;
  logName_contains?: Maybe<String>;
  logName_not_contains?: Maybe<String>;
  logName_starts_with?: Maybe<String>;
  logName_not_starts_with?: Maybe<String>;
  logName_ends_with?: Maybe<String>;
  logName_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  ox?: Maybe<String>;
  ox_not?: Maybe<String>;
  ox_in?: Maybe<String[] | String>;
  ox_not_in?: Maybe<String[] | String>;
  ox_lt?: Maybe<String>;
  ox_lte?: Maybe<String>;
  ox_gt?: Maybe<String>;
  ox_gte?: Maybe<String>;
  ox_contains?: Maybe<String>;
  ox_not_contains?: Maybe<String>;
  ox_starts_with?: Maybe<String>;
  ox_not_starts_with?: Maybe<String>;
  ox_ends_with?: Maybe<String>;
  ox_not_ends_with?: Maybe<String>;
  AND?: Maybe<ScoreScalarWhereInput[] | ScoreScalarWhereInput>;
  OR?: Maybe<ScoreScalarWhereInput[] | ScoreScalarWhereInput>;
  NOT?: Maybe<ScoreScalarWhereInput[] | ScoreScalarWhereInput>;
}

export interface ScoreUpdateManyWithWhereNestedInput {
  where: ScoreScalarWhereInput;
  data: ScoreUpdateManyDataInput;
}

export interface ScoreUpdateManyDataInput {
  logName?: Maybe<String>;
  number?: Maybe<Int>;
  ox?: Maybe<String>;
}

export interface GradeSheetUpdateManyMutationInput {
  logName?: Maybe<String>;
  name?: Maybe<String>;
  sumScore?: Maybe<Int>;
}

export interface LogCreateInput {
  id?: Maybe<ID_Input>;
  logName: String;
  user?: Maybe<UserCreateOneWithoutLogsInput>;
  test?: Maybe<TestCreateOneInput>;
  totalScore: Int;
  gradeInfo?: Maybe<GradeSheetCreateManyInput>;
}

export interface UserCreateOneWithoutLogsInput {
  create?: Maybe<UserCreateWithoutLogsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutLogsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  userType?: Maybe<String>;
}

export interface TestCreateOneInput {
  create?: Maybe<TestCreateInput>;
  connect?: Maybe<TestWhereUniqueInput>;
}

export interface TestCreateInput {
  id?: Maybe<ID_Input>;
  testName: String;
  type: String;
  description: String;
  answerSheet?: Maybe<AnswerSheetCreateManyInput>;
}

export interface AnswerSheetCreateManyInput {
  create?: Maybe<AnswerSheetCreateInput[] | AnswerSheetCreateInput>;
  connect?: Maybe<AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput>;
}

export interface GradeSheetCreateManyInput {
  create?: Maybe<GradeSheetCreateInput[] | GradeSheetCreateInput>;
  connect?: Maybe<GradeSheetWhereUniqueInput[] | GradeSheetWhereUniqueInput>;
}

export interface LogUpdateInput {
  logName?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutLogsInput>;
  test?: Maybe<TestUpdateOneInput>;
  totalScore?: Maybe<Int>;
  gradeInfo?: Maybe<GradeSheetUpdateManyInput>;
}

export interface UserUpdateOneWithoutLogsInput {
  create?: Maybe<UserCreateWithoutLogsInput>;
  update?: Maybe<UserUpdateWithoutLogsDataInput>;
  upsert?: Maybe<UserUpsertWithoutLogsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutLogsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  userType?: Maybe<String>;
}

export interface UserUpsertWithoutLogsInput {
  update: UserUpdateWithoutLogsDataInput;
  create: UserCreateWithoutLogsInput;
}

export interface TestUpdateOneInput {
  create?: Maybe<TestCreateInput>;
  update?: Maybe<TestUpdateDataInput>;
  upsert?: Maybe<TestUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TestWhereUniqueInput>;
}

export interface TestUpdateDataInput {
  testName?: Maybe<String>;
  type?: Maybe<String>;
  description?: Maybe<String>;
  answerSheet?: Maybe<AnswerSheetUpdateManyInput>;
}

export interface AnswerSheetUpdateManyInput {
  create?: Maybe<AnswerSheetCreateInput[] | AnswerSheetCreateInput>;
  update?: Maybe<
    | AnswerSheetUpdateWithWhereUniqueNestedInput[]
    | AnswerSheetUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AnswerSheetUpsertWithWhereUniqueNestedInput[]
    | AnswerSheetUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput>;
  connect?: Maybe<AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput>;
  set?: Maybe<AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput>;
  disconnect?: Maybe<
    AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput
  >;
  deleteMany?: Maybe<
    AnswerSheetScalarWhereInput[] | AnswerSheetScalarWhereInput
  >;
  updateMany?: Maybe<
    | AnswerSheetUpdateManyWithWhereNestedInput[]
    | AnswerSheetUpdateManyWithWhereNestedInput
  >;
}

export interface AnswerSheetUpdateWithWhereUniqueNestedInput {
  where: AnswerSheetWhereUniqueInput;
  data: AnswerSheetUpdateDataInput;
}

export interface AnswerSheetUpdateDataInput {
  testName?: Maybe<String>;
  name?: Maybe<String>;
  answers?: Maybe<AnswerUpdateManyInput>;
}

export interface AnswerSheetUpsertWithWhereUniqueNestedInput {
  where: AnswerSheetWhereUniqueInput;
  update: AnswerSheetUpdateDataInput;
  create: AnswerSheetCreateInput;
}

export interface AnswerSheetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  testName?: Maybe<String>;
  testName_not?: Maybe<String>;
  testName_in?: Maybe<String[] | String>;
  testName_not_in?: Maybe<String[] | String>;
  testName_lt?: Maybe<String>;
  testName_lte?: Maybe<String>;
  testName_gt?: Maybe<String>;
  testName_gte?: Maybe<String>;
  testName_contains?: Maybe<String>;
  testName_not_contains?: Maybe<String>;
  testName_starts_with?: Maybe<String>;
  testName_not_starts_with?: Maybe<String>;
  testName_ends_with?: Maybe<String>;
  testName_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<AnswerSheetScalarWhereInput[] | AnswerSheetScalarWhereInput>;
  OR?: Maybe<AnswerSheetScalarWhereInput[] | AnswerSheetScalarWhereInput>;
  NOT?: Maybe<AnswerSheetScalarWhereInput[] | AnswerSheetScalarWhereInput>;
}

export interface AnswerSheetUpdateManyWithWhereNestedInput {
  where: AnswerSheetScalarWhereInput;
  data: AnswerSheetUpdateManyDataInput;
}

export interface AnswerSheetUpdateManyDataInput {
  testName?: Maybe<String>;
  name?: Maybe<String>;
}

export interface TestUpsertNestedInput {
  update: TestUpdateDataInput;
  create: TestCreateInput;
}

export interface GradeSheetUpdateManyInput {
  create?: Maybe<GradeSheetCreateInput[] | GradeSheetCreateInput>;
  update?: Maybe<
    | GradeSheetUpdateWithWhereUniqueNestedInput[]
    | GradeSheetUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | GradeSheetUpsertWithWhereUniqueNestedInput[]
    | GradeSheetUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<GradeSheetWhereUniqueInput[] | GradeSheetWhereUniqueInput>;
  connect?: Maybe<GradeSheetWhereUniqueInput[] | GradeSheetWhereUniqueInput>;
  set?: Maybe<GradeSheetWhereUniqueInput[] | GradeSheetWhereUniqueInput>;
  disconnect?: Maybe<GradeSheetWhereUniqueInput[] | GradeSheetWhereUniqueInput>;
  deleteMany?: Maybe<GradeSheetScalarWhereInput[] | GradeSheetScalarWhereInput>;
  updateMany?: Maybe<
    | GradeSheetUpdateManyWithWhereNestedInput[]
    | GradeSheetUpdateManyWithWhereNestedInput
  >;
}

export interface GradeSheetUpdateWithWhereUniqueNestedInput {
  where: GradeSheetWhereUniqueInput;
  data: GradeSheetUpdateDataInput;
}

export interface GradeSheetUpdateDataInput {
  logName?: Maybe<String>;
  name?: Maybe<String>;
  sumScore?: Maybe<Int>;
  scores?: Maybe<ScoreUpdateManyInput>;
}

export interface GradeSheetUpsertWithWhereUniqueNestedInput {
  where: GradeSheetWhereUniqueInput;
  update: GradeSheetUpdateDataInput;
  create: GradeSheetCreateInput;
}

export interface GradeSheetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  logName?: Maybe<String>;
  logName_not?: Maybe<String>;
  logName_in?: Maybe<String[] | String>;
  logName_not_in?: Maybe<String[] | String>;
  logName_lt?: Maybe<String>;
  logName_lte?: Maybe<String>;
  logName_gt?: Maybe<String>;
  logName_gte?: Maybe<String>;
  logName_contains?: Maybe<String>;
  logName_not_contains?: Maybe<String>;
  logName_starts_with?: Maybe<String>;
  logName_not_starts_with?: Maybe<String>;
  logName_ends_with?: Maybe<String>;
  logName_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  sumScore?: Maybe<Int>;
  sumScore_not?: Maybe<Int>;
  sumScore_in?: Maybe<Int[] | Int>;
  sumScore_not_in?: Maybe<Int[] | Int>;
  sumScore_lt?: Maybe<Int>;
  sumScore_lte?: Maybe<Int>;
  sumScore_gt?: Maybe<Int>;
  sumScore_gte?: Maybe<Int>;
  AND?: Maybe<GradeSheetScalarWhereInput[] | GradeSheetScalarWhereInput>;
  OR?: Maybe<GradeSheetScalarWhereInput[] | GradeSheetScalarWhereInput>;
  NOT?: Maybe<GradeSheetScalarWhereInput[] | GradeSheetScalarWhereInput>;
}

export interface GradeSheetUpdateManyWithWhereNestedInput {
  where: GradeSheetScalarWhereInput;
  data: GradeSheetUpdateManyDataInput;
}

export interface GradeSheetUpdateManyDataInput {
  logName?: Maybe<String>;
  name?: Maybe<String>;
  sumScore?: Maybe<Int>;
}

export interface LogUpdateManyMutationInput {
  logName?: Maybe<String>;
  totalScore?: Maybe<Int>;
}

export interface ScoreUpdateInput {
  logName?: Maybe<String>;
  number?: Maybe<Int>;
  ox?: Maybe<String>;
}

export interface ScoreUpdateManyMutationInput {
  logName?: Maybe<String>;
  number?: Maybe<Int>;
  ox?: Maybe<String>;
}

export interface TestUpdateInput {
  testName?: Maybe<String>;
  type?: Maybe<String>;
  description?: Maybe<String>;
  answerSheet?: Maybe<AnswerSheetUpdateManyInput>;
}

export interface TestUpdateManyMutationInput {
  testName?: Maybe<String>;
  type?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  userType?: Maybe<String>;
  logs?: Maybe<LogCreateManyWithoutUserInput>;
}

export interface LogCreateManyWithoutUserInput {
  create?: Maybe<LogCreateWithoutUserInput[] | LogCreateWithoutUserInput>;
  connect?: Maybe<LogWhereUniqueInput[] | LogWhereUniqueInput>;
}

export interface LogCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  logName: String;
  test?: Maybe<TestCreateOneInput>;
  totalScore: Int;
  gradeInfo?: Maybe<GradeSheetCreateManyInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  userType?: Maybe<String>;
  logs?: Maybe<LogUpdateManyWithoutUserInput>;
}

export interface LogUpdateManyWithoutUserInput {
  create?: Maybe<LogCreateWithoutUserInput[] | LogCreateWithoutUserInput>;
  delete?: Maybe<LogWhereUniqueInput[] | LogWhereUniqueInput>;
  connect?: Maybe<LogWhereUniqueInput[] | LogWhereUniqueInput>;
  set?: Maybe<LogWhereUniqueInput[] | LogWhereUniqueInput>;
  disconnect?: Maybe<LogWhereUniqueInput[] | LogWhereUniqueInput>;
  update?: Maybe<
    | LogUpdateWithWhereUniqueWithoutUserInput[]
    | LogUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | LogUpsertWithWhereUniqueWithoutUserInput[]
    | LogUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<LogScalarWhereInput[] | LogScalarWhereInput>;
  updateMany?: Maybe<
    LogUpdateManyWithWhereNestedInput[] | LogUpdateManyWithWhereNestedInput
  >;
}

export interface LogUpdateWithWhereUniqueWithoutUserInput {
  where: LogWhereUniqueInput;
  data: LogUpdateWithoutUserDataInput;
}

export interface LogUpdateWithoutUserDataInput {
  logName?: Maybe<String>;
  test?: Maybe<TestUpdateOneInput>;
  totalScore?: Maybe<Int>;
  gradeInfo?: Maybe<GradeSheetUpdateManyInput>;
}

export interface LogUpsertWithWhereUniqueWithoutUserInput {
  where: LogWhereUniqueInput;
  update: LogUpdateWithoutUserDataInput;
  create: LogCreateWithoutUserInput;
}

export interface LogScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  logName?: Maybe<String>;
  logName_not?: Maybe<String>;
  logName_in?: Maybe<String[] | String>;
  logName_not_in?: Maybe<String[] | String>;
  logName_lt?: Maybe<String>;
  logName_lte?: Maybe<String>;
  logName_gt?: Maybe<String>;
  logName_gte?: Maybe<String>;
  logName_contains?: Maybe<String>;
  logName_not_contains?: Maybe<String>;
  logName_starts_with?: Maybe<String>;
  logName_not_starts_with?: Maybe<String>;
  logName_ends_with?: Maybe<String>;
  logName_not_ends_with?: Maybe<String>;
  totalScore?: Maybe<Int>;
  totalScore_not?: Maybe<Int>;
  totalScore_in?: Maybe<Int[] | Int>;
  totalScore_not_in?: Maybe<Int[] | Int>;
  totalScore_lt?: Maybe<Int>;
  totalScore_lte?: Maybe<Int>;
  totalScore_gt?: Maybe<Int>;
  totalScore_gte?: Maybe<Int>;
  AND?: Maybe<LogScalarWhereInput[] | LogScalarWhereInput>;
  OR?: Maybe<LogScalarWhereInput[] | LogScalarWhereInput>;
  NOT?: Maybe<LogScalarWhereInput[] | LogScalarWhereInput>;
}

export interface LogUpdateManyWithWhereNestedInput {
  where: LogScalarWhereInput;
  data: LogUpdateManyDataInput;
}

export interface LogUpdateManyDataInput {
  logName?: Maybe<String>;
  totalScore?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  userType?: Maybe<String>;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  OR?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  NOT?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
}

export interface AnswerSheetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerSheetWhereInput>;
  AND?: Maybe<
    AnswerSheetSubscriptionWhereInput[] | AnswerSheetSubscriptionWhereInput
  >;
  OR?: Maybe<
    AnswerSheetSubscriptionWhereInput[] | AnswerSheetSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AnswerSheetSubscriptionWhereInput[] | AnswerSheetSubscriptionWhereInput
  >;
}

export interface GradeSheetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GradeSheetWhereInput>;
  AND?: Maybe<
    GradeSheetSubscriptionWhereInput[] | GradeSheetSubscriptionWhereInput
  >;
  OR?: Maybe<
    GradeSheetSubscriptionWhereInput[] | GradeSheetSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GradeSheetSubscriptionWhereInput[] | GradeSheetSubscriptionWhereInput
  >;
}

export interface LogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LogWhereInput>;
  AND?: Maybe<LogSubscriptionWhereInput[] | LogSubscriptionWhereInput>;
  OR?: Maybe<LogSubscriptionWhereInput[] | LogSubscriptionWhereInput>;
  NOT?: Maybe<LogSubscriptionWhereInput[] | LogSubscriptionWhereInput>;
}

export interface ScoreSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ScoreWhereInput>;
  AND?: Maybe<ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput>;
  OR?: Maybe<ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput>;
  NOT?: Maybe<ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput>;
}

export interface TestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TestWhereInput>;
  AND?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
  OR?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
  NOT?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Answer {
  id: ID_Output;
  testName?: String;
  number: Int;
  answer: String;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  testName: () => Promise<String>;
  number: () => Promise<Int>;
  answer: () => Promise<String>;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  testName: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface AnswerNullablePromise
  extends Promise<Answer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  testName: () => Promise<String>;
  number: () => Promise<Int>;
  answer: () => Promise<String>;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AnswerSheet {
  id: ID_Output;
  testName?: String;
  name: String;
}

export interface AnswerSheetPromise extends Promise<AnswerSheet>, Fragmentable {
  id: () => Promise<ID_Output>;
  testName: () => Promise<String>;
  name: () => Promise<String>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerSheetSubscription
  extends Promise<AsyncIterator<AnswerSheet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  testName: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerSheetNullablePromise
  extends Promise<AnswerSheet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  testName: () => Promise<String>;
  name: () => Promise<String>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerSheetConnection {
  pageInfo: PageInfo;
  edges: AnswerSheetEdge[];
}

export interface AnswerSheetConnectionPromise
  extends Promise<AnswerSheetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerSheetEdge>>() => T;
  aggregate: <T = AggregateAnswerSheetPromise>() => T;
}

export interface AnswerSheetConnectionSubscription
  extends Promise<AsyncIterator<AnswerSheetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerSheetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSheetSubscription>() => T;
}

export interface AnswerSheetEdge {
  node: AnswerSheet;
  cursor: String;
}

export interface AnswerSheetEdgePromise
  extends Promise<AnswerSheetEdge>,
    Fragmentable {
  node: <T = AnswerSheetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerSheetEdgeSubscription
  extends Promise<AsyncIterator<AnswerSheetEdge>>,
    Fragmentable {
  node: <T = AnswerSheetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswerSheet {
  count: Int;
}

export interface AggregateAnswerSheetPromise
  extends Promise<AggregateAnswerSheet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSheetSubscription
  extends Promise<AsyncIterator<AggregateAnswerSheet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GradeSheet {
  id: ID_Output;
  logName?: String;
  name: String;
  sumScore: Int;
}

export interface GradeSheetPromise extends Promise<GradeSheet>, Fragmentable {
  id: () => Promise<ID_Output>;
  logName: () => Promise<String>;
  name: () => Promise<String>;
  sumScore: () => Promise<Int>;
  scores: <T = FragmentableArray<Score>>(args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GradeSheetSubscription
  extends Promise<AsyncIterator<GradeSheet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  logName: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sumScore: () => Promise<AsyncIterator<Int>>;
  scores: <T = Promise<AsyncIterator<ScoreSubscription>>>(args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GradeSheetNullablePromise
  extends Promise<GradeSheet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  logName: () => Promise<String>;
  name: () => Promise<String>;
  sumScore: () => Promise<Int>;
  scores: <T = FragmentableArray<Score>>(args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Score {
  id: ID_Output;
  logName?: String;
  number: Int;
  ox: String;
}

export interface ScorePromise extends Promise<Score>, Fragmentable {
  id: () => Promise<ID_Output>;
  logName: () => Promise<String>;
  number: () => Promise<Int>;
  ox: () => Promise<String>;
}

export interface ScoreSubscription
  extends Promise<AsyncIterator<Score>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  logName: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  ox: () => Promise<AsyncIterator<String>>;
}

export interface ScoreNullablePromise
  extends Promise<Score | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  logName: () => Promise<String>;
  number: () => Promise<Int>;
  ox: () => Promise<String>;
}

export interface GradeSheetConnection {
  pageInfo: PageInfo;
  edges: GradeSheetEdge[];
}

export interface GradeSheetConnectionPromise
  extends Promise<GradeSheetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GradeSheetEdge>>() => T;
  aggregate: <T = AggregateGradeSheetPromise>() => T;
}

export interface GradeSheetConnectionSubscription
  extends Promise<AsyncIterator<GradeSheetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GradeSheetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGradeSheetSubscription>() => T;
}

export interface GradeSheetEdge {
  node: GradeSheet;
  cursor: String;
}

export interface GradeSheetEdgePromise
  extends Promise<GradeSheetEdge>,
    Fragmentable {
  node: <T = GradeSheetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GradeSheetEdgeSubscription
  extends Promise<AsyncIterator<GradeSheetEdge>>,
    Fragmentable {
  node: <T = GradeSheetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGradeSheet {
  count: Int;
}

export interface AggregateGradeSheetPromise
  extends Promise<AggregateGradeSheet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGradeSheetSubscription
  extends Promise<AsyncIterator<AggregateGradeSheet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Log {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  logName: String;
  totalScore: Int;
}

export interface LogPromise extends Promise<Log>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  logName: () => Promise<String>;
  user: <T = UserPromise>() => T;
  test: <T = TestPromise>() => T;
  totalScore: () => Promise<Int>;
  gradeInfo: <T = FragmentableArray<GradeSheet>>(args?: {
    where?: GradeSheetWhereInput;
    orderBy?: GradeSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LogSubscription
  extends Promise<AsyncIterator<Log>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  logName: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  test: <T = TestSubscription>() => T;
  totalScore: () => Promise<AsyncIterator<Int>>;
  gradeInfo: <T = Promise<AsyncIterator<GradeSheetSubscription>>>(args?: {
    where?: GradeSheetWhereInput;
    orderBy?: GradeSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LogNullablePromise extends Promise<Log | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  logName: () => Promise<String>;
  user: <T = UserPromise>() => T;
  test: <T = TestPromise>() => T;
  totalScore: () => Promise<Int>;
  gradeInfo: <T = FragmentableArray<GradeSheet>>(args?: {
    where?: GradeSheetWhereInput;
    orderBy?: GradeSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  userType?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  userType: () => Promise<String>;
  logs: <T = FragmentableArray<Log>>(args?: {
    where?: LogWhereInput;
    orderBy?: LogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userType: () => Promise<AsyncIterator<String>>;
  logs: <T = Promise<AsyncIterator<LogSubscription>>>(args?: {
    where?: LogWhereInput;
    orderBy?: LogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  userType: () => Promise<String>;
  logs: <T = FragmentableArray<Log>>(args?: {
    where?: LogWhereInput;
    orderBy?: LogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Test {
  id: ID_Output;
  createdAt: DateTimeOutput;
  testName: String;
  type: String;
  description: String;
}

export interface TestPromise extends Promise<Test>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  testName: () => Promise<String>;
  type: () => Promise<String>;
  description: () => Promise<String>;
  answerSheet: <T = FragmentableArray<AnswerSheet>>(args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TestSubscription
  extends Promise<AsyncIterator<Test>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  testName: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  answerSheet: <T = Promise<AsyncIterator<AnswerSheetSubscription>>>(args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TestNullablePromise
  extends Promise<Test | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  testName: () => Promise<String>;
  type: () => Promise<String>;
  description: () => Promise<String>;
  answerSheet: <T = FragmentableArray<AnswerSheet>>(args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LogConnection {
  pageInfo: PageInfo;
  edges: LogEdge[];
}

export interface LogConnectionPromise
  extends Promise<LogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LogEdge>>() => T;
  aggregate: <T = AggregateLogPromise>() => T;
}

export interface LogConnectionSubscription
  extends Promise<AsyncIterator<LogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLogSubscription>() => T;
}

export interface LogEdge {
  node: Log;
  cursor: String;
}

export interface LogEdgePromise extends Promise<LogEdge>, Fragmentable {
  node: <T = LogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LogEdgeSubscription
  extends Promise<AsyncIterator<LogEdge>>,
    Fragmentable {
  node: <T = LogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLog {
  count: Int;
}

export interface AggregateLogPromise
  extends Promise<AggregateLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLogSubscription
  extends Promise<AsyncIterator<AggregateLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScoreConnection {
  pageInfo: PageInfo;
  edges: ScoreEdge[];
}

export interface ScoreConnectionPromise
  extends Promise<ScoreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScoreEdge>>() => T;
  aggregate: <T = AggregateScorePromise>() => T;
}

export interface ScoreConnectionSubscription
  extends Promise<AsyncIterator<ScoreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScoreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScoreSubscription>() => T;
}

export interface ScoreEdge {
  node: Score;
  cursor: String;
}

export interface ScoreEdgePromise extends Promise<ScoreEdge>, Fragmentable {
  node: <T = ScorePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScoreEdgeSubscription
  extends Promise<AsyncIterator<ScoreEdge>>,
    Fragmentable {
  node: <T = ScoreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScore {
  count: Int;
}

export interface AggregateScorePromise
  extends Promise<AggregateScore>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScoreSubscription
  extends Promise<AsyncIterator<AggregateScore>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TestConnection {
  pageInfo: PageInfo;
  edges: TestEdge[];
}

export interface TestConnectionPromise
  extends Promise<TestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TestEdge>>() => T;
  aggregate: <T = AggregateTestPromise>() => T;
}

export interface TestConnectionSubscription
  extends Promise<AsyncIterator<TestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTestSubscription>() => T;
}

export interface TestEdge {
  node: Test;
  cursor: String;
}

export interface TestEdgePromise extends Promise<TestEdge>, Fragmentable {
  node: <T = TestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TestEdgeSubscription
  extends Promise<AsyncIterator<TestEdge>>,
    Fragmentable {
  node: <T = TestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTest {
  count: Int;
}

export interface AggregateTestPromise
  extends Promise<AggregateTest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTestSubscription
  extends Promise<AsyncIterator<AggregateTest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  testName?: String;
  number: Int;
  answer: String;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  testName: () => Promise<String>;
  number: () => Promise<Int>;
  answer: () => Promise<String>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  testName: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface AnswerSheetSubscriptionPayload {
  mutation: MutationType;
  node: AnswerSheet;
  updatedFields: String[];
  previousValues: AnswerSheetPreviousValues;
}

export interface AnswerSheetSubscriptionPayloadPromise
  extends Promise<AnswerSheetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerSheetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerSheetPreviousValuesPromise>() => T;
}

export interface AnswerSheetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSheetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSheetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerSheetPreviousValuesSubscription>() => T;
}

export interface AnswerSheetPreviousValues {
  id: ID_Output;
  testName?: String;
  name: String;
}

export interface AnswerSheetPreviousValuesPromise
  extends Promise<AnswerSheetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  testName: () => Promise<String>;
  name: () => Promise<String>;
}

export interface AnswerSheetPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerSheetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  testName: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface GradeSheetSubscriptionPayload {
  mutation: MutationType;
  node: GradeSheet;
  updatedFields: String[];
  previousValues: GradeSheetPreviousValues;
}

export interface GradeSheetSubscriptionPayloadPromise
  extends Promise<GradeSheetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GradeSheetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GradeSheetPreviousValuesPromise>() => T;
}

export interface GradeSheetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GradeSheetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GradeSheetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GradeSheetPreviousValuesSubscription>() => T;
}

export interface GradeSheetPreviousValues {
  id: ID_Output;
  logName?: String;
  name: String;
  sumScore: Int;
}

export interface GradeSheetPreviousValuesPromise
  extends Promise<GradeSheetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  logName: () => Promise<String>;
  name: () => Promise<String>;
  sumScore: () => Promise<Int>;
}

export interface GradeSheetPreviousValuesSubscription
  extends Promise<AsyncIterator<GradeSheetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  logName: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sumScore: () => Promise<AsyncIterator<Int>>;
}

export interface LogSubscriptionPayload {
  mutation: MutationType;
  node: Log;
  updatedFields: String[];
  previousValues: LogPreviousValues;
}

export interface LogSubscriptionPayloadPromise
  extends Promise<LogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LogPreviousValuesPromise>() => T;
}

export interface LogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LogPreviousValuesSubscription>() => T;
}

export interface LogPreviousValues {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  logName: String;
  totalScore: Int;
}

export interface LogPreviousValuesPromise
  extends Promise<LogPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  logName: () => Promise<String>;
  totalScore: () => Promise<Int>;
}

export interface LogPreviousValuesSubscription
  extends Promise<AsyncIterator<LogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  logName: () => Promise<AsyncIterator<String>>;
  totalScore: () => Promise<AsyncIterator<Int>>;
}

export interface ScoreSubscriptionPayload {
  mutation: MutationType;
  node: Score;
  updatedFields: String[];
  previousValues: ScorePreviousValues;
}

export interface ScoreSubscriptionPayloadPromise
  extends Promise<ScoreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScorePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScorePreviousValuesPromise>() => T;
}

export interface ScoreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScoreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScoreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScorePreviousValuesSubscription>() => T;
}

export interface ScorePreviousValues {
  id: ID_Output;
  logName?: String;
  number: Int;
  ox: String;
}

export interface ScorePreviousValuesPromise
  extends Promise<ScorePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  logName: () => Promise<String>;
  number: () => Promise<Int>;
  ox: () => Promise<String>;
}

export interface ScorePreviousValuesSubscription
  extends Promise<AsyncIterator<ScorePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  logName: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  ox: () => Promise<AsyncIterator<String>>;
}

export interface TestSubscriptionPayload {
  mutation: MutationType;
  node: Test;
  updatedFields: String[];
  previousValues: TestPreviousValues;
}

export interface TestSubscriptionPayloadPromise
  extends Promise<TestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TestPreviousValuesPromise>() => T;
}

export interface TestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TestPreviousValuesSubscription>() => T;
}

export interface TestPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  testName: String;
  type: String;
  description: String;
}

export interface TestPreviousValuesPromise
  extends Promise<TestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  testName: () => Promise<String>;
  type: () => Promise<String>;
  description: () => Promise<String>;
}

export interface TestPreviousValuesSubscription
  extends Promise<AsyncIterator<TestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  testName: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  userType?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  userType: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userType: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Test",
    embedded: false
  },
  {
    name: "AnswerSheet",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Log",
    embedded: false
  },
  {
    name: "GradeSheet",
    embedded: false
  },
  {
    name: "Score",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
