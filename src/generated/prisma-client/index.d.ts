// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  answerSheet: (where?: AnswerSheetWhereInput) => Promise<boolean>;
  test: (where?: TestWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answer: (where: AnswerWhereUniqueInput) => AnswerNullablePromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  answerSheet: (
    where: AnswerSheetWhereUniqueInput
  ) => AnswerSheetNullablePromise;
  answerSheets: (args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AnswerSheet>;
  answerSheetsConnection: (args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerSheetConnectionPromise;
  test: (where: TestWhereUniqueInput) => TestNullablePromise;
  tests: (args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Test>;
  testsConnection: (args?: {
    where?: TestWhereInput;
    orderBy?: TestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TestConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  updateManyAnswers: (args: {
    data: AnswerUpdateManyMutationInput;
    where?: AnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createAnswerSheet: (data: AnswerSheetCreateInput) => AnswerSheetPromise;
  updateAnswerSheet: (args: {
    data: AnswerSheetUpdateInput;
    where: AnswerSheetWhereUniqueInput;
  }) => AnswerSheetPromise;
  updateManyAnswerSheets: (args: {
    data: AnswerSheetUpdateManyMutationInput;
    where?: AnswerSheetWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswerSheet: (args: {
    where: AnswerSheetWhereUniqueInput;
    create: AnswerSheetCreateInput;
    update: AnswerSheetUpdateInput;
  }) => AnswerSheetPromise;
  deleteAnswerSheet: (where: AnswerSheetWhereUniqueInput) => AnswerSheetPromise;
  deleteManyAnswerSheets: (
    where?: AnswerSheetWhereInput
  ) => BatchPayloadPromise;
  createTest: (data: TestCreateInput) => TestPromise;
  updateTest: (args: {
    data: TestUpdateInput;
    where: TestWhereUniqueInput;
  }) => TestPromise;
  updateManyTests: (args: {
    data: TestUpdateManyMutationInput;
    where?: TestWhereInput;
  }) => BatchPayloadPromise;
  upsertTest: (args: {
    where: TestWhereUniqueInput;
    create: TestCreateInput;
    update: TestUpdateInput;
  }) => TestPromise;
  deleteTest: (where: TestWhereUniqueInput) => TestPromise;
  deleteManyTests: (where?: TestWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  answerSheet: (
    where?: AnswerSheetSubscriptionWhereInput
  ) => AnswerSheetSubscriptionPayloadSubscription;
  test: (
    where?: TestSubscriptionWhereInput
  ) => TestSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "number_ASC"
  | "number_DESC"
  | "answer_ASC"
  | "answer_DESC";

export type AnswerSheetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type TestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "description_ASC"
  | "description_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  OR?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  NOT?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
}

export type AnswerSheetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AnswerSheetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  answers_every?: Maybe<AnswerWhereInput>;
  answers_some?: Maybe<AnswerWhereInput>;
  answers_none?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSheetWhereInput[] | AnswerSheetWhereInput>;
  OR?: Maybe<AnswerSheetWhereInput[] | AnswerSheetWhereInput>;
  NOT?: Maybe<AnswerSheetWhereInput[] | AnswerSheetWhereInput>;
}

export type TestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  answerSheet_every?: Maybe<AnswerSheetWhereInput>;
  answerSheet_some?: Maybe<AnswerSheetWhereInput>;
  answerSheet_none?: Maybe<AnswerSheetWhereInput>;
  AND?: Maybe<TestWhereInput[] | TestWhereInput>;
  OR?: Maybe<TestWhereInput[] | TestWhereInput>;
  NOT?: Maybe<TestWhereInput[] | TestWhereInput>;
}

export interface AnswerCreateInput {
  id?: Maybe<ID_Input>;
  number: Int;
  answer: String;
}

export interface AnswerUpdateInput {
  number?: Maybe<Int>;
  answer?: Maybe<String>;
}

export interface AnswerUpdateManyMutationInput {
  number?: Maybe<Int>;
  answer?: Maybe<String>;
}

export interface AnswerSheetCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  answers?: Maybe<AnswerCreateManyInput>;
}

export interface AnswerCreateManyInput {
  create?: Maybe<AnswerCreateInput[] | AnswerCreateInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
}

export interface AnswerSheetUpdateInput {
  name?: Maybe<String>;
  answers?: Maybe<AnswerUpdateManyInput>;
}

export interface AnswerUpdateManyInput {
  create?: Maybe<AnswerCreateInput[] | AnswerCreateInput>;
  update?: Maybe<
    | AnswerUpdateWithWhereUniqueNestedInput[]
    | AnswerUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AnswerUpsertWithWhereUniqueNestedInput[]
    | AnswerUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  set?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  disconnect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  deleteMany?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  updateMany?: Maybe<
    | AnswerUpdateManyWithWhereNestedInput[]
    | AnswerUpdateManyWithWhereNestedInput
  >;
}

export interface AnswerUpdateWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateDataInput;
}

export interface AnswerUpdateDataInput {
  number?: Maybe<Int>;
  answer?: Maybe<String>;
}

export interface AnswerUpsertWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateDataInput;
  create: AnswerCreateInput;
}

export interface AnswerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  OR?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  NOT?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput;
  data: AnswerUpdateManyDataInput;
}

export interface AnswerUpdateManyDataInput {
  number?: Maybe<Int>;
  answer?: Maybe<String>;
}

export interface AnswerSheetUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface TestCreateInput {
  id?: Maybe<ID_Input>;
  type: String;
  description: String;
  answerSheet?: Maybe<AnswerSheetCreateManyInput>;
}

export interface AnswerSheetCreateManyInput {
  create?: Maybe<AnswerSheetCreateInput[] | AnswerSheetCreateInput>;
  connect?: Maybe<AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput>;
}

export interface TestUpdateInput {
  type?: Maybe<String>;
  description?: Maybe<String>;
  answerSheet?: Maybe<AnswerSheetUpdateManyInput>;
}

export interface AnswerSheetUpdateManyInput {
  create?: Maybe<AnswerSheetCreateInput[] | AnswerSheetCreateInput>;
  update?: Maybe<
    | AnswerSheetUpdateWithWhereUniqueNestedInput[]
    | AnswerSheetUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AnswerSheetUpsertWithWhereUniqueNestedInput[]
    | AnswerSheetUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput>;
  connect?: Maybe<AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput>;
  set?: Maybe<AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput>;
  disconnect?: Maybe<
    AnswerSheetWhereUniqueInput[] | AnswerSheetWhereUniqueInput
  >;
  deleteMany?: Maybe<
    AnswerSheetScalarWhereInput[] | AnswerSheetScalarWhereInput
  >;
  updateMany?: Maybe<
    | AnswerSheetUpdateManyWithWhereNestedInput[]
    | AnswerSheetUpdateManyWithWhereNestedInput
  >;
}

export interface AnswerSheetUpdateWithWhereUniqueNestedInput {
  where: AnswerSheetWhereUniqueInput;
  data: AnswerSheetUpdateDataInput;
}

export interface AnswerSheetUpdateDataInput {
  name?: Maybe<String>;
  answers?: Maybe<AnswerUpdateManyInput>;
}

export interface AnswerSheetUpsertWithWhereUniqueNestedInput {
  where: AnswerSheetWhereUniqueInput;
  update: AnswerSheetUpdateDataInput;
  create: AnswerSheetCreateInput;
}

export interface AnswerSheetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<AnswerSheetScalarWhereInput[] | AnswerSheetScalarWhereInput>;
  OR?: Maybe<AnswerSheetScalarWhereInput[] | AnswerSheetScalarWhereInput>;
  NOT?: Maybe<AnswerSheetScalarWhereInput[] | AnswerSheetScalarWhereInput>;
}

export interface AnswerSheetUpdateManyWithWhereNestedInput {
  where: AnswerSheetScalarWhereInput;
  data: AnswerSheetUpdateManyDataInput;
}

export interface AnswerSheetUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface TestUpdateManyMutationInput {
  type?: Maybe<String>;
  description?: Maybe<String>;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  OR?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  NOT?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
}

export interface AnswerSheetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerSheetWhereInput>;
  AND?: Maybe<
    AnswerSheetSubscriptionWhereInput[] | AnswerSheetSubscriptionWhereInput
  >;
  OR?: Maybe<
    AnswerSheetSubscriptionWhereInput[] | AnswerSheetSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AnswerSheetSubscriptionWhereInput[] | AnswerSheetSubscriptionWhereInput
  >;
}

export interface TestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TestWhereInput>;
  AND?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
  OR?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
  NOT?: Maybe<TestSubscriptionWhereInput[] | TestSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Answer {
  id: ID_Output;
  number: Int;
  answer: String;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  answer: () => Promise<String>;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface AnswerNullablePromise
  extends Promise<Answer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  answer: () => Promise<String>;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AnswerSheet {
  id: ID_Output;
  name: String;
}

export interface AnswerSheetPromise extends Promise<AnswerSheet>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerSheetSubscription
  extends Promise<AsyncIterator<AnswerSheet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerSheetNullablePromise
  extends Promise<AnswerSheet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AnswerSheetConnection {
  pageInfo: PageInfo;
  edges: AnswerSheetEdge[];
}

export interface AnswerSheetConnectionPromise
  extends Promise<AnswerSheetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerSheetEdge>>() => T;
  aggregate: <T = AggregateAnswerSheetPromise>() => T;
}

export interface AnswerSheetConnectionSubscription
  extends Promise<AsyncIterator<AnswerSheetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerSheetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSheetSubscription>() => T;
}

export interface AnswerSheetEdge {
  node: AnswerSheet;
  cursor: String;
}

export interface AnswerSheetEdgePromise
  extends Promise<AnswerSheetEdge>,
    Fragmentable {
  node: <T = AnswerSheetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerSheetEdgeSubscription
  extends Promise<AsyncIterator<AnswerSheetEdge>>,
    Fragmentable {
  node: <T = AnswerSheetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswerSheet {
  count: Int;
}

export interface AggregateAnswerSheetPromise
  extends Promise<AggregateAnswerSheet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSheetSubscription
  extends Promise<AsyncIterator<AggregateAnswerSheet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Test {
  id: ID_Output;
  createdAt: DateTimeOutput;
  type: String;
  description: String;
}

export interface TestPromise extends Promise<Test>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<String>;
  description: () => Promise<String>;
  answerSheet: <T = FragmentableArray<AnswerSheet>>(args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TestSubscription
  extends Promise<AsyncIterator<Test>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  answerSheet: <T = Promise<AsyncIterator<AnswerSheetSubscription>>>(args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TestNullablePromise
  extends Promise<Test | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<String>;
  description: () => Promise<String>;
  answerSheet: <T = FragmentableArray<AnswerSheet>>(args?: {
    where?: AnswerSheetWhereInput;
    orderBy?: AnswerSheetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TestConnection {
  pageInfo: PageInfo;
  edges: TestEdge[];
}

export interface TestConnectionPromise
  extends Promise<TestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TestEdge>>() => T;
  aggregate: <T = AggregateTestPromise>() => T;
}

export interface TestConnectionSubscription
  extends Promise<AsyncIterator<TestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTestSubscription>() => T;
}

export interface TestEdge {
  node: Test;
  cursor: String;
}

export interface TestEdgePromise extends Promise<TestEdge>, Fragmentable {
  node: <T = TestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TestEdgeSubscription
  extends Promise<AsyncIterator<TestEdge>>,
    Fragmentable {
  node: <T = TestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTest {
  count: Int;
}

export interface AggregateTestPromise
  extends Promise<AggregateTest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTestSubscription
  extends Promise<AsyncIterator<AggregateTest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  number: Int;
  answer: String;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  answer: () => Promise<String>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface AnswerSheetSubscriptionPayload {
  mutation: MutationType;
  node: AnswerSheet;
  updatedFields: String[];
  previousValues: AnswerSheetPreviousValues;
}

export interface AnswerSheetSubscriptionPayloadPromise
  extends Promise<AnswerSheetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerSheetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerSheetPreviousValuesPromise>() => T;
}

export interface AnswerSheetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSheetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSheetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerSheetPreviousValuesSubscription>() => T;
}

export interface AnswerSheetPreviousValues {
  id: ID_Output;
  name: String;
}

export interface AnswerSheetPreviousValuesPromise
  extends Promise<AnswerSheetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AnswerSheetPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerSheetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TestSubscriptionPayload {
  mutation: MutationType;
  node: Test;
  updatedFields: String[];
  previousValues: TestPreviousValues;
}

export interface TestSubscriptionPayloadPromise
  extends Promise<TestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TestPreviousValuesPromise>() => T;
}

export interface TestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TestPreviousValuesSubscription>() => T;
}

export interface TestPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  type: String;
  description: String;
}

export interface TestPreviousValuesPromise
  extends Promise<TestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  type: () => Promise<String>;
  description: () => Promise<String>;
}

export interface TestPreviousValuesSubscription
  extends Promise<AsyncIterator<TestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Test",
    embedded: false
  },
  {
    name: "AnswerSheet",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
